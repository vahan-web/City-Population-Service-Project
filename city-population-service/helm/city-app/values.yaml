# Number of application replicas to run
replicaCount: 1

# Container image configuration
image:
  repository: your-account-id.dkr.ecr.your-aws-region.amazonaws.com/city-population-service
  tag: latest
  pullPolicy: IfNotPresent

# Container port configuration
containerPort:
  name: http
  port: 5000
  protocol: TCP

# Health check probes
probes:
  liveness:
    path: /health
    port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  readiness:
    path: /health
    port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# MySQL database configuration
config:
  mysql:
    host: mysql-mysql
    port: 3306
    database: citydb
    user: cityapp
    secretName: mysql-mysql
    secretKey: mysql-password

# ConfigMap configuration
configMap:
  enabled: true
  # Additional data to mount as environment variables
  data:
    APP_LOG_LEVEL: "info"
    APP_DEBUG: "false"
  
  # Application configuration files
  files: {}
    # app.conf: |
    #   log_level = info
    #   debug = false

secrets: {}

# Security context configuration
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false

# Optional init containers (e.g., to wait for dependencies)
initContainers:
  - name: wait-for-mysql
    image: busybox:1.28
    command: ['sh', '-c', 'until nc -z $(MYSQL_HOST) $(MYSQL_PORT); do echo waiting for mysql; sleep 2; done;']
    env:
      - name: MYSQL_HOST
        value: mysql-mysql
      - name: MYSQL_PORT
        value: "3306"

# Additional environment variables
extraEnv: []
  # - name: EXTRA_VARIABLE
  #   value: "extra-value"

# Additional volume mounts
extraVolumeMounts: []
  # - name: extra-volume
  #   mountPath: /mnt/extra

# Additional volumes
extraVolumes: []
  # - name: extra-volume
  #   emptyDir: {}

# Node selection configuration
nodeSelector: {}
  # kubernetes.io/os: linux

# Pod scheduling affinity rules
affinity: {}
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 100
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: app.kubernetes.io/name
  #           operator: In
  #           values:
  #           - city-population-service
  #       topologyKey: kubernetes.io/hostname

# Pod scheduling tolerations
tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"

# Service configuration
service:
  type: LoadBalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  port: 80
  targetPort: 5000

# Ingress configuration (if you want to expose the service externally)
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local